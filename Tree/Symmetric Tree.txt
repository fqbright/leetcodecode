//recursive
class Solution {
    bool IsSym(TreeNode* left, TreeNode* right){
      if(!left && !right) return true;
      if((!left) ^ (!right)) return false;
      return left->val == right->val &&
               IsSym(left->left,right->right) &&
                 IsSym(left->right,right->left);
    }
public:
    bool isSymmetric(TreeNode *root) {
      if(!root) return true;
      return IsSym(root->left,root->right);
    }
};

//iteration
class Solution {
public:
    bool isSymmetric(TreeNode *root) {
        queue<TreeNode*> q;
        if(root==NULL) return true;
        q.push(root->left);
        q.push(root->right);
        while(!q.empty())
        {
            TreeNode* left = q.front();
            q.pop();
            TreeNode* right = q.front();
            q.pop();
            if(left==NULL&&right==NULL) continue;
            if(left==NULL^right==NULL) return false;
            if(left->val!=right->val) return false;
            q.push(left->right);
            q.push(right->left);
            q.push(left->left);
            q.push(right->right);
        }
        return true;
    }
};