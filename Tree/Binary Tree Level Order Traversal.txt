class Solution {
public:
    vector<vector<int> > levelOrder(TreeNode *root) {
        TreeNode* pre_level = root;
        vector<vector<int>> result;
        if(!root) return result;
        queue<TreeNode*> q;
        q.push(root);
        result.push_back(vector<int>());
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            result.back().push_back(node->val);
            if(node->left) q.push(node->left);
            if(node->right) q.push(node->right);
            if(pre_level==node){
                pre_level = q.back();
                result.push_back(vector<int>());
            }
        }
        result.pop_back();
        return result;
    }
};

//µÝ¹é°æ
class Solution {
    void RecLevel(TreeNode* root,int level,vector<vector<int>>& result){
      if(!root) return;
      if(level<result.size()){
        result[level].push_back(root->val);
      }else{
        result.push_back(vector<int>(1,root->val));
      }
      RecLevel(root->left,level+1,result);
      RecLevel(root->right,level+1,result);
    }
public:
    vector<vector<int> > levelOrder(TreeNode *root) {
      vector<vector<int>> result;
      RecLevel(root,0,result);
      return result;
    }
};