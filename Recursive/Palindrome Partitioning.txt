class Solution {
private:
    string s;
    vector<string> par;
    void RecPartition(int st,vector<vector<string>>& result,vector<vector<bool>>& is_par){
      if(st==s.length()){
        result.push_back(par);
        return;
      }
      for(int i=st;i<s.length();i++){
        if(is_par[st][i-st+1]){
          par.push_back(s.substr(st,i-st+1));
          RecPartition(i+1,result,is_par);
          par.pop_back();
        }
      }
    }
public:
    vector<vector<string>> partition(string s) {
      int len = s.length();
      this->s = s;
      vector<vector<bool>> is_par(len,vector<bool>(len+1,true));
      for(int i=2;i<=len;i++){
        for(int j=0;j+i-1<len;j++){
          if(s[j]!=s[j+i-1] || (i>2&&!is_par[j+1][i-2]))
            is_par[j][i] = false;  //start at j, length = i, is not palindrome
        }
      }
      vector<vector<string>> result;
      RecPartition(0,result,is_par);
      return result;
    }
};