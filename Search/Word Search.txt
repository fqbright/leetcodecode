class Solution {
    bool InRange(int i, int j, const vector<vector<char>>& board){
      return i >= 0 && j >= 0 && i < board.size() && j < board[0].size();
    }
    bool RecCheck(const string& word, const vector<vector<char>>& board,
      int col, int row, int index, set<int>& visited){
        if(index + 1 == word.length())
          return true;
        int dir[4][2] = {{1,0}, {-1,0}, {0,1}, {0,-1}};
        for(int i = 0; i < 4; ++i){
          int new_col = col + dir[i][0], new_row = row + dir[i][1];
          int h = new_col * board[0].size() + new_row;
          if(InRange(new_col, new_row, board) &&
            board[new_col][new_row] == word[index+1] &&
            visited.find(h) == visited.end()){
              visited.insert(h);
              if(RecCheck(word, board, new_col, new_row, index+1, visited))
                return true;
              visited.erase(h);
            }
        }
        return false;
      }
public:
    bool exist(vector<vector<char> > &board, string word) {
      for(int i = 0; i < board.size(); ++i){
        for(int j = 0; j < board[i].size(); ++j){
          if(word[0] == board[i][j]){
            set<int> visited;
            visited.insert(i * board[i].size() + j);
            if(RecCheck(word, board, i, j, 0, visited))
              return true;
          }
        }
      }
      return false;
    }
};