//大数据超时！！！
class Solution {
    bool check(vector<int>& r){
      int size = r.size();
      for(int i = 0; i < size - 1; ++i){
        int diff = abs(r[i] - r.back());
        if( diff == 0 || size - i - 1 == diff)
          return false;
      }
      return true;
    }
    int PlaceQueue(int num, int size, vector<int>& r){
      if(num == size)
        return 1;
      int sum = 0;
      for(int i = 0; i < size; ++i){
        r.push_back(i);
        if(check(r)){
          sum += PlaceQueue(num+1, size, r);
        }
        r.pop_back();
      }
      return sum;
    }
public:
    int totalNQueens(int n) { 
      vector<int> r;
      return PlaceQueue(0,n,r);
    }
};
//牛逼版，用位运算记录，具体方法参照网站：
//http://blog.csdn.net/hackbuteer1/article/details/6657109
class Solution {
    int finish;
    int RecCount(int col, int left, int right){
      if( finish == col ) 
        return 1;
      int p = 1, sum = 0;
      int pos_flag = col | left | right;
      while( p <= finish ){
        if( (pos_flag & p) == 0 ){ //记得括号，==优先级比&高
          sum += RecCount(col | p, (left | p) << 1, (right | p) >> 1);
        }
        p <<= 1;
      }
      return sum;
    }
public:
    int totalNQueens(int n) {
      finish = (1 << n) - 1;
      return RecCount(0, 0, 0);
    }
};