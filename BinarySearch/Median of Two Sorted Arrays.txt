//复杂度只需要log(min(n,m)),思路是对小的数组二分，如果找不到解，那说明小的
//数组里每个元素都比median大，这时只要假设小数组接在大数组后面，然后求大数组
//的median即可
//算法考虑了当中值出现在每个A[i],A[i+1]之间时的情况，除了i=-1，所以最后如果
//没找到解，说明中值比A[0]小，所以直接在B数组中找第(m+n)/2个元素即可

这个题非常容易出错，有几点需要注意的：
1.二分小的数组，既可以降低复杂度，又可以保证B的index不会越界（还要配合2）
2.当m+n为偶数时，找中位数中大的数字，这是为了index_b不会越界
3.当B[index_b]<=A[index_a]<=B[index_b+1]时，A[index_a]是一个我们需要的值。
  如果index_b+1越界，那默认成立。
4.实际做时，先判断当前两个index都不符合要求的情况，可以使得判断语句简洁
5.二分结束时，如果还没有return，说明了所有的A中元素都比我们要找的数字大。
class Solution {
public:
    const int MIN_INT = (unsigned)1<<31;
    double findMedianSortedArrays(int A[], int m, int B[], int n) {
        if(m+n==0) return 0;
        if(m>n){
            std::swap(A,B);
            std::swap(m,n);
        }
        int tar_pos = (m+n)/2;
        for(int i=0,j=m-1;i<=j;){ //A取小的数组，同时，当m+n为偶数时，找大的中位数，保证pos_b不会越界
            int pos_a = i + (j-i)/2, pos_b = tar_pos-pos_a-1;
            if(pos_b+1<n&&A[pos_a]>B[pos_b+1]){
                j = pos_a-1;
            }else if(pos_a+1<m&&A[pos_a+1]<B[pos_b]){
                i = pos_a+1;
            }else{
                if(A[pos_a]>=B[pos_b]){
                    if((m+n)%2) return A[pos_a];
                    return ((double)A[pos_a]+max(pos_a-1>=0?A[pos_a-1]:MIN_INT,B[pos_b]))/2;
                }else{
                    if((m+n)%2) return B[pos_b];
                    return ((double)B[pos_b]+max(pos_b-1>=0?B[pos_b-1]:MIN_INT,A[pos_a]))/2;
                }
            }
        }
        if((m+n)%2) return B[(m+n-1)/2];
        return (double)(B[(m+n)/2]+B[(m+n)/2-1])/2;
    }
};

class Solution {
public:
    double findMedian(int A[],int left,int right,int B[],int lenA,int lenB)
    {
        if(left>right)
            return findMedian(B,max(0,(lenA+lenB)/2-lenA),min((lenA+lenB)/2,lenB-1),A,lenB,lenA);
        int mid = (left+right)/2;
        int j = (lenA+lenB)/2-mid-1;
        if(j+1<lenB&&A[mid]>B[j+1])
            return findMedian(A,left,mid-1,B,lenA,lenB);
        if(j>=0&&A[mid]<B[j])
            return findMedian(A,mid+1,right,B,lenA,lenB);
        if((lenA+lenB)%2) return A[mid];
        if(mid>0&&j>=0) return (double)(A[mid]+max(B[j],A[mid-1]))/2;
        if(j>=0) return (double)(A[mid]+B[j])/2;
        if(mid>0) return (double)(A[mid]+A[mid-1])/2;
    }
    double findMedianSortedArrays(int A[], int m, int B[], int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        return findMedian(A,max(0,(n+m)/2-n),min((m+n)/2,m-1),B,m,n);
    }
};
