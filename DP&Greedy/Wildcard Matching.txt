//最坏情况O(n*m),比总是O(n*m)的dp要快
//思路是贪心去匹配s，每个*匹配尽可能短的字符串，每次碰到一个新的*，新的*前面的部分
//就已经匹配了s的一部分，这时候整个串能匹配的充要条件就是两个串剩下的部分能匹配了
class Solution {
public:
    bool isMatch(const char *s, const char *p) {
        const char* pre_s=NULL,*pre_p=NULL;
        while(*s){
            if(*s==*p||*p=='?'){
                s++;
                p++;
            }else{
                if(*p=='*'){
                    pre_s = s;
                    pre_p = ++p;
                }else if(pre_p!=NULL){
                    s = ++pre_s;
                    p = pre_p;
                }else
                    return false;
            }
        }
        while(*p=='*') p++;
        return !*p;
    }
};

//正解应该是O(n),把*当做分界处，第二个串弄成k个子串，各自跟第一个串匹配
//每次匹配时，第一个串的位置从前一次匹配完成处开始，最后要特殊判断最后一个匹配
//的串，因为必须使得最后一个匹配是在最后一个字符处结束
//为了避免特判，可以先从两个字符串两头贪心匹配，分别匹配到第一个和最后一个*
//这样的话就不需要特别判断